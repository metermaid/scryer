{"version":3,"sources":["Blaseball.js","events.js","columns.js","sibr.js","App.js","serviceWorker.js","index.js"],"names":["getPlayersFromBlaseball","type","axios","get","then","response","data","teamPromises","map","team","processTeam","Promise","all","ids","LodashGet","join","params","player","value","_id","name","label","String","fromCodePoint","emoji","nickname","getBonusPlayers","bonusPlayers","LodashSortBy","LodashFlatten","concat","gameEvents","playerEvents","gameEventColumns","cleanedParams","LodashPickBy","LodashIdentity","catch","error","reject","formLayout","labelCol","span","wrapperCol","tableLayout","scroll","x","App","props","state","results","batters","pitchers","onFinish","bind","this","getPlayers","Blaseball","setState","values","sibr","console","log","className","Header","theme","style","padding","src","Content","Item","placeholder","options","showSearch","allowClear","optionFilterProp","events","offset","htmlType","dataSource","columns","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.58ab3ba5.chunk.js","sourcesContent":["import axios from 'axios';\nimport LodashGet from 'lodash/get';\nimport LodashFlatten from 'lodash/flatten';\nimport LodashSortBy from 'lodash/sortBy';\n\nexport const getPlayers = (type) => {\n    const bonusPlayers = getBonusPlayers(type);\n    return getPlayersFromBlaseball(type).then(data => LodashSortBy(LodashFlatten(data).concat(bonusPlayers), ['name']));\n};\n\nexport const getTeams = () => {\n    return axios.get(`https://blaseball.com/database/allTeams`)\n        .then(response => response && response.data);\n};\n\nexport const getPlayersFromBlaseball = (type) => {\n    return getTeams().then(response => {\n        let teamPromises = response.map(team => processTeam(team, type));\n        return Promise.all(teamPromises);\n    });\n};\n\nconst processTeam = (team, type) => {\n    const ids = LodashGet(team, type).join(',');\n    return axios.get(`https://blaseball.com/database/players`, { params: { ids: ids }})\n        .then(response => \n            response && response.data && response.data.map(player => {\n                return {\n                    value: player._id,\n                    name: player.name,\n                    label: `${player.name} (${String.fromCodePoint(team.emoji)} ${team.nickname})`,\n                    team: team.nickname\n                };\n            }));\n};\n\nexport const getTeamEmojis = (team) => {\n\n};\n\n\n\nconst getBonusPlayers = (type) => {\n    switch (type) {\n        default:\n            return [];\n    }\n};\n\nexport default {\n    getPlayers\n};\n","export const gameEvents = [\n    {\n        value: 'UNKNOWN',\n        label: 'Unknown'\n    }, {\n        value: 'NONE',\n        label: 'None'\n    }, {\n        value: 'OUT',\n        label: 'Out'\n    }, {\n        value: 'STRIKEOUT',\n        label: 'Strikeout'\n    }, {\n        value: 'STOLEN_BASE',\n        label: 'Stolen Base'\n    }, {\n        value: 'CAUGHT_STEALING',\n        label: 'Caugh Stealing'\n    }, {\n        value: 'PICKOFF',\n        label: 'Pickoff'\n    }, {\n        value: 'WILD_PITCH',\n        label: 'Wild Pitch'\n    }, {\n        value: 'BALK',\n        label: 'Balk'\n    }, {\n        value: 'OTHER_ADVANCE',\n        label: 'Other Advance'\n    }, {\n        value: 'WALK',\n        label: 'Walk'\n    }, {\n        value: 'INTENTIONAL_WALK',\n        label: 'Intentional Walk'\n    }, {\n        value: 'HIT_BY_PITCH',\n        label: 'Hit By Pitch'\n    }, {\n        value: 'FIELDERS_CHOICE',\n        label: 'Fielders Choice'\n    }, {\n        value: 'SINGLE',\n        label: 'Single'\n    }, {\n        value: 'DOUBLE',\n        label: 'Double'\n    }, {\n        value: 'TRIPLE',\n        label: 'Triple'\n    }, {\n        value: 'HOME_RUN',\n        label: 'Home Run'\n    }\n];\n\nexport const playerEvents = [\n    {\n        value: 'INCINERATION',\n        label: 'Incineration'\n    }, {\n        value: 'PEANUT_GOOD',\n        label: 'Peanut (Yummy Reaction)'\n    }, {\n        value: 'PEANUT_BAD',\n        label: 'Peanut (Allergic Reaction)'\n    }\n];\n\nexport default {\n    gameEvents,\n    playerEvents\n};","export const gameEventColumns = [\n  {\n    \"dataIndex\": \"id\",\n    \"title\": \"id\"\n  },\n  {\n    \"dataIndex\": \"game_id\",\n    \"title\": \"game id\"\n  },\n  {\n    \"dataIndex\": \"event_type\",\n    \"title\": \"event type\"\n  },\n  {\n    \"dataIndex\": \"event_index\",\n    \"title\": \"event index\"\n  },\n  {\n    \"dataIndex\": \"inning\",\n    \"title\": \"inning\"\n  },\n  {\n    \"dataIndex\": \"top_of_inning\",\n    \"title\": \"top of inning\"\n  },\n  {\n    \"dataIndex\": \"outs_before_play\",\n    \"title\": \"outs before play\"\n  },\n  {\n    \"dataIndex\": \"batter_id\",\n    \"title\": \"batter id\"\n  },\n  {\n    \"dataIndex\": \"batter_team_id\",\n    \"title\": \"batter team id\"\n  },\n  {\n    \"dataIndex\": \"pitcher_id\",\n    \"title\": \"pitcher id\"\n  },\n  {\n    \"dataIndex\": \"pitcher_team_id\",\n    \"title\": \"pitcher team id\"\n  },\n  {\n    \"dataIndex\": \"home_score\",\n    \"title\": \"home score\"\n  },\n  {\n    \"dataIndex\": \"away_score\",\n    \"title\": \"away score\"\n  },\n  {\n    \"dataIndex\": \"home_strike_count\",\n    \"title\": \"home strike count\"\n  },\n  {\n    \"dataIndex\": \"away_strike_count\",\n    \"title\": \"away strike count\"\n  },\n  {\n    \"dataIndex\": \"batter_count\",\n    \"title\": \"batter count\"\n  },\n  {\n    \"dataIndex\": \"pitches\",\n    \"title\": \"pitches\"\n  },\n  {\n    \"dataIndex\": \"total_strikes\",\n    \"title\": \"total strikes\"\n  },\n  {\n    \"dataIndex\": \"total_balls\",\n    \"title\": \"total balls\"\n  },\n  {\n    \"dataIndex\": \"total_fouls\",\n    \"title\": \"total fouls\"\n  },\n  {\n    \"dataIndex\": \"is_leadoff\",\n    \"title\": \"is leadoff\"\n  },\n  {\n    \"dataIndex\": \"is_pinch_hit\",\n    \"title\": \"is pinch hit\"\n  },\n  {\n    \"dataIndex\": \"lineup_position\",\n    \"title\": \"lineup position\"\n  },\n  {\n    \"dataIndex\": \"is_last_event_for_plate_appearance\",\n    \"title\": \"is last event for plate appearance\"\n  },\n  {\n    \"dataIndex\": \"bases_hit\",\n    \"title\": \"bases hit\"\n  },\n  {\n    \"dataIndex\": \"runs_batted_in\",\n    \"title\": \"runs batted in\"\n  },\n  {\n    \"dataIndex\": \"is_sacrifice_hit\",\n    \"title\": \"is sacrifice hit\"\n  },\n  {\n    \"dataIndex\": \"is_sacrifice_fly\",\n    \"title\": \"is sacrifice fly\"\n  },\n  {\n    \"dataIndex\": \"outs_on_play\",\n    \"title\": \"outs on play\"\n  },\n  {\n    \"dataIndex\": \"is_double_play\",\n    \"title\": \"is double play\"\n  },\n  {\n    \"dataIndex\": \"is_triple_play\",\n    \"title\": \"is triple play\"\n  },\n  {\n    \"dataIndex\": \"is_wild_pitch\",\n    \"title\": \"is wild pitch\"\n  },\n  {\n    \"dataIndex\": \"batted_ball_type\",\n    \"title\": \"batted ball type\"\n  },\n  {\n    \"dataIndex\": \"is_bunt\",\n    \"title\": \"is bunt\"\n  },\n  {\n    \"dataIndex\": \"errors_on_play\",\n    \"title\": \"errors on play\"\n  },\n  {\n    \"dataIndex\": \"batter_base_after_play\",\n    \"title\": \"batter base after play\"\n  },\n  {\n    \"dataIndex\": \"is_last_game_event\",\n    \"title\": \"is last game event\"\n  },\n  {\n    \"dataIndex\": \"event_text\",\n    \"title\": \"event text\"\n  },\n  {\n    \"dataIndex\": \"additional_context\",\n    \"title\": \"additional context\"\n  },\n  {\n    \"dataIndex\": \"base_runners\",\n    \"title\": \"base runners\"\n  },\n  {\n    \"dataIndex\": \"player_events\",\n    \"title\": \"player events\"\n  }\n];\n\nexport default {\n    gameEventColumns\n};","import axios from 'axios';\nimport LodashPickBy from 'lodash/pickBy';\nimport LodashIdentity from 'lodash/identity';\n\nexport const getEvents = (params) => {\n    const cleanedParams = LodashPickBy(params, LodashIdentity);\n    return axios.get('https://cors-anywhere.herokuapp.com/https://api.blaseball-reference.com/v1/events', { params: cleanedParams })\n        .then(response => response && response.data)\n        .catch(/* istanbul ignore next */ error => Promise.reject(error));\n};\n\nexport default {\n    getEvents\n};\n","import React from 'react';\nimport { Button, Form, Input, Select, Table, Layout } from 'antd';\nimport Blaseball from './Blaseball';\nimport events from './events';\nimport columns from './columns';\n\n//import PlayersSelect from './PlayersSelect';\nimport sibr from './sibr';\n\nconst formLayout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 }\n};\n\nconst tableLayout = {\n  scroll: { x: true }\n};\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = { results: null, batters: null, pitchers: null };\n        this.onFinish = this.onFinish.bind(this);\n    }\n\n    componentDidMount () {\n        this.getPlayers();\n    }\n\n    getPlayers() {\n        Blaseball.getPlayers('lineup').then(/* istanbul ignore next */ data => {\n            data && this.setState({ batters: data});\n        }).catch(/* istanbul ignore next */ error => Promise.reject(error));\n        Blaseball.getPlayers('rotation').then(/* istanbul ignore next */ data => {\n            data && this.setState({ pitchers: data});\n        }).catch(/* istanbul ignore next */ error => Promise.reject(error));\n    }\n\n    onFinish (values) {\n        sibr.getEvents(values)\n            .then(results => {\n                console.log(results);\n                this.setState({ results: results && results.results });\n            })\n            .catch(/* istanbul ignore next */ error => Promise.reject(error));\n    }\n\n    render () {\n      const { results, batters, pitchers } = this.state;\n      return (\n        <div className='App'>\n            <Layout>\n                <Layout.Header theme=\"dark\" style={{ padding: '0 200px' }}>\n                    <img src='logo192.png' className='logo' />\n                    <h1>SIBR Scryer</h1>\n                </Layout.Header>\n                <Layout.Content style={{ padding: '0 200px' }}>\n                    <Form onFinish={this.onFinish} {...formLayout} style={{ padding: '10px 0' }}>\n                        <Form.Item name='gameId' label='Game (optional)'>\n                            <Input placeholder='dc767612-eb77-417b-8d2f-c21eb4dab868' />\n                        </Form.Item>\n                        <Form.Item name='pitcherId' label='Pitcher (optional)'>\n                            <Select placeholder='Pitcher' options={pitchers} showSearch allowClear optionFilterProp='label' />\n                        </Form.Item>\n                        <Form.Item name='batterId' label='Batter (optional)'>\n                            <Select placeholder='Batter' options={batters} showSearch allowClear optionFilterProp='label' />\n                        </Form.Item>\n                        <Form.Item name='type' label='Type (optional)'>\n                            <Select options={events.gameEvents} showSearch allowClear />\n                        </Form.Item>\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                            <Button type='primary' htmlType='submit'>\n                              Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                    <div className='results-list'>\n                        <Table dataSource={results} columns={columns.gameEventColumns} {...tableLayout} />\n                    </div>\n                </Layout.Content>\n            </Layout>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}